// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// SASS MIXINS
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// --- 
// Example SASS Mixin structure:
//
// @mixin colored_box($color) { 
//   @extend .box;
//   background-color: $color;
//   border-color: border_color($color);
// }
// ---


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// REM OUTPUT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// $val: the pixel value (with or without the px unit)
// $prop: the css property to write
// $adjust: the amount to adjust $val to achieve an equal rem value
//
// Thanks to @codingdesigner for the help.

@mixin rem($val, $prop: 'font-size', $adjust: $base_font_size) {
    // strip unit from px if provided in the argument
    @if unit($val) == px {
        $val: $val / 1px;
    }

    #{$prop}: $val + px;
    #{$prop}: pxcalc($val, $adjust, $unit: rem);
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// INTERACTIVE HIDDEN & VISIBLE
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

@mixin interactive_hidden($position:absolute, $overflow:hidden) { position: $position; height: 0; overflow: $overflow; visibility: hidden; }

@mixin interactive_visible($position:static, $overflow:visible) { position: $position; height: auto; overflow: $overflow; visibility: visible; }



// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// FOR IMAGE REPLACEMENT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// ---
// Same as the '.ir' helper class, but as a SASS mixin.
// ---

@mixin image_replacement() { display: block; border: 0; text-indent: -999em; overflow: hidden; background-color: transparent; background-repeat: no-repeat; text-align: left; direction: ltr; *line-height: 0; }



// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// FOR TEXT REPLACEMENT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// ---
// Visually hide text to then manipulate the use of the element.
// ---

@mixin text_replacement() { display: block; text-indent: -999em; overflow: hidden; text-align: left; direction: ltr; *line-height: 0; }



// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// INITIAL DEFAULT FOR CSS ARROW ICONS
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

@mixin icon_arrow() { background-color: transparent; content: ''; display: block; height: 0; position: absolute; width: 0; }



// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// VISUALLY HIDDEN & RESTORED
//
// Hide only visually, but have it available for screenreaders.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// --- 
// Same as the '.visually-hidden' helper class, but as a SASS mixin. Also 
// provides a way to 'restore' the visibility of the element if used as a 
// mixin, thus adding/removing the styles.
// ---

@mixin visually_hidden($position:absolute) { border: 0; clip: rect(0 0 0 0); height: 1px; margin: -1px; overflow: hidden; padding: 0; position: $position; width: 1px; }

@mixin visually_restored($position:static) { clip: auto; height: auto; margin: auto; overflow: visible; position: $position; width: auto; }



// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// LIST RESET
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

@mixin list_reset() { list-style-type: none; margin: 0; padding: 0; }




// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// CLEARFIX
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//--
// Contain floats: h5bp.com/q
//--

@mixin clearfix() {
  &:before, &:after { content: ""; display: table; }
  &:after { clear: both; }
  & { *zoom: 1; }
}



// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// PSEUDO ELEMENT BASE
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

@mixin pseudo_base($height:0, $width:0) { content: ''; display: block; height: $height + px; width: $width + px; }



// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// FORCE TO COMPOSITE LAYER
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
//--
// Force browser to move element to composite layer to help with performance.
//--

@mixin composite_layer() {
	-webkit-transform: translateZ(0);
		-moz-transition: translateZ(0);
			 -o-transform: translateZ(0);
			-ms-transform: translateZ(0);
					transform: translateZ(0);
}
